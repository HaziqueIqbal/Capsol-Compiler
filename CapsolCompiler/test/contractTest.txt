capsol version 0.1;

contract conc{
    constructor(uint id, string name) public{}
    $$int a = +2;
    $$int b = a;
    $$int c = a + b;
    $$string d = "d";
    string public abc = "d";
    uint public  x = 5;
    uint public b = x * 3;
    int public c;
    point public point2 = 83.4;
    point public point1 = point2;
    alpha public alp = '4';
    int public a = +64; 
    function ssbb(uint a,uint b) public returns (int){
        int cb;
        a = this.b;
        string abc = "";
        string bc = this.abc; 
        uint bx =5;
        b = bx;
        cb = this.a;
        while(!true){}
        do{}while(this.x < this.b);
        do{}while(!false);
        if(a<b){}else if(a<b){}else{}         
    }
    function ssbb(uint a,uint b, int bb) public returns (int){
        a = this.b;
        string bc = this.abc;
        int x = this.ssbb(this.x, this.b);
        while(a<b){
        }
    }
}
 
contract conc1 {
    uint x = 4; 
    string abc = "d";
    conc s = new conc(x,abc);
}
abstract contract conc2 is conc, conc1{
    function ssbb(uint storage a,uint[] b) public returns (uint){
        uint bd = super.x;
        string x = super.abc; 
        for(;;){             
        }     
    }
}

interface u1 {
    function ssbb(int storage a,uint[] b) public returns (uint) $$not contain body
}

interface u2 {}
interface conc3 is u1, u2{}


contract D{
    uint x = 3;
    function bxc(int a){}
}
contract C {uint cx = 0;
    D bb = new D();
}
contract B{C d = new C();}
contract A{
    
    B a = new B();
    int ag = +4;
    function ssb(int a){
        for(;;this.a.d.bb.bxc(this.ag).v++);
    }
    
}
